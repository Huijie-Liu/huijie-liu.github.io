# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      # Consider updating HUGO_VERSION to a more recent version if needed
      HUGO_VERSION: 0.147.9
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      # Dart Sass is needed for Hugo extended version to process SCSS
      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive # Fetch Hugo themes (true OR recursive)
          # fetch-depth: 0 fetches all history for .GitInfo. Set to 1 for faster checkout if not needed.
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      # Added: Setup Node.js for npm dependencies (if any)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Use the latest LTS version, or specify a version like '18.x', '20.x'
          node-version: "lts/*"
          # Optional: Cache npm dependencies for faster builds

      # Modified: Added check for package.json existence before installing
      - name: Install Node.js dependencies
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          elif [ -f package.json ]; then
            echo "Warning: package.json found but no lockfile. Consider creating one (npm install --package-lock-only) for reproducible builds."
            # Optionally run 'npm install' here, but 'npm ci' is preferred for CI
          else
            echo "No Node.js dependency file found, skipping step."
          fi

      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          # Ensure OPENAIAPIKEY is set in your repository secrets
          API_KEY: ${{ secrets.OPENAIAPIKEY }}
        run: |
          hugo \
            --gc \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      # Updated: Use latest version of upload-pages-artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3 # Updated to v3
        with:
          # Upload entire directory by default
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # Run only after build job is successful
    steps:
      # Updated: Use latest version of deploy-pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # Updated to v4
